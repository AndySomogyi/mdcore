
# This file is part of mdcore.
# Coypright (c) 2010 Pedro Gonnet (gonnet@maths.ox.ac.uk)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# init the project
AC_INIT(src/engine.c)
AC_CONFIG_MACRO_DIR([m4])
VERSION="0.1.3"
AC_SUBST(VERSION)
AM_INIT_AUTOMAKE(mdcore,VERSION)
AC_GNU_SOURCE
AC_PROG_LIBTOOL

# compiler settings
CFLAGS="-Wall -g $CFLAGS"

# generate header file
AM_CONFIG_HEADER(config.h)

# find and test the compiler
AC_PROG_CC_C99
AC_LANG_C
# AX_CC_MAXOPT
AX_FUNC_POSIX_MEMALIGN
AX_GCC_ARCHFLAG([yes])
AX_EXT
# AX_CFLAGS_GCC_OPTION(-flto)

# autoconf stuff
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_HEADER_STDC


# check for the libraries we will need
AC_CHECK_LIB(m,sqrt,,AC_MSG_ERROR(something is wrong with the math library!))


# Check for pthreads
ACX_PTHREAD([LIBS="$PTHREAD_LIBS $LIBS" CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
    CC="$PTHREAD_CC" LDFLAGS="$PTHREAD_LIBS $LIBS"],
    AC_MSG_ERROR([Could not find a working version of
    the pthread library. Make sure you have the library and header files installed
    or use CPPFLAGS and LDFLAGS if the library is installed in a
    non-standard location.]))
    
    
# Check for pthread_setaffinity_np
AC_USE_SYSTEM_EXTENSIONS
AC_CHECK_FUNC( pthread_setaffinity_np , AC_DEFINE([HAVE_SETAFFINITY],[true],
    [Defined if pthread_setaffinity_np exists.]) )


# Check for timing functions needed by cycle.h
AC_C_INLINE
AC_HEADER_TIME
AC_CHECK_HEADERS([sys/time.h c_asm.h intrinsics.h mach/mach_time.h])

AC_CHECK_TYPE([hrtime_t],[AC_DEFINE(HAVE_HRTIME_T, 1, [Define to 1 if hrtime_t is defined in <sys/time.h>])],,[#if HAVE_SYS_TIME_H
#include <sys/time.h>
#endif])

AC_CHECK_FUNCS([gethrtime read_real_time time_base_to_time clock_gettime mach_absolute_time])

dnl Cray UNICOS _rtc() (real-time clock) intrinsic
AC_MSG_CHECKING([for _rtc intrinsic])
rtc_ok=yes
AC_TRY_LINK([#ifdef HAVE_INTRINSICS_H
#include <intrinsics.h>
#endif], [_rtc()], [AC_DEFINE(HAVE__RTC,1,[Define if you have the UNICOS _rtc() intrinsic.])], [rtc_ok=no])
AC_MSG_RESULT($rtc_ok)


# Check for OpenMP
AX_OPENMP
AC_SUBST(OPENMP_CFLAGS)


# Check for MPI
AC_ARG_ENABLE([mpi],
    [AS_HELP_STRING([--enable-mpi],[compile with functionality for distributed-memory parallelim using MPI @<:@default=yes@:>@])],
    [if test "x$enable_mpi" != "xno"
     then
        ACX_MPI([ CC="$MPICC" AC_DEFINE(HAVE_MPI,1,[Define if you have the MPI library.]) ])
     fi],
    [ACX_MPI([ CC="$MPICC" AC_DEFINE(HAVE_MPI,1,[Define if you have the MPI library.]) ])])
AM_CONDITIONAL([HAVEMPI],[test -n "$MPICC"])

    
# Check for metis
AC_ARG_WITH([metis],
    [AS_HELP_STRING([--with-metis=PATH],[prefix where the metis library is installed @<:@default=/opt/cell@:>@])],
    [if test "x$with_metis" != "xno"
     then
        if test "x$with_metis" != "xyes"
        then
            METIS_LDFLAGS="-L$with_metis -lmetis"
        else
            METIS_LDFLAGS="-lmetis"
        fi
        AC_CHECK_LIB([metis],[METIS_PartGraphKway],,AC_MSG_ERROR(something is wrong with the metis library!),$METIS_LDFLAGS)
        AC_DEFINE([HAVE_METIS],[true],[The metis library appears to be present.])
	AC_DEFINE(WITH_METIS, 1, [METIS library installed])
     fi])
AC_SUBST(METIS_LDFLAGS)
AM_CONDITIONAL([HAVEMETIS],[test -n "$METIS_LDFLAGS"])


# Check for fftw3
AC_ARG_WITH([fftw3],
    [AS_HELP_STRING([--with-fftw3=PATH],[prefix where the fftw3 library is installed @<:@default=yes@:>@])],
    [],
    [with_fftw3=yes])
if test "x$with_fftw3" != "xno"
    then
       if test "x$with_fftw3" != "xyes"
       then
           FFTW3_LDFLAGS="-L$with_fftw3 -lfftw3f"
       else
           FFTW3_LDFLAGS="-lfftw3f"
       fi
       AC_CHECK_LIB([fftw3f],[fftwf_plan_dft_3d],,AC_MSG_ERROR(something is wrong with the fftw3 library!),$FFTW3_LDFLAGS)
       AC_DEFINE([HAVE_FFTW3],[true],[The fftw3 library appears to be present.])
    fi
AC_SUBST(FFTW3_LDFLAGS)
AM_CONDITIONAL([HAVEFFTW3],[test -n "$FFTW3_LDFLAGS"])



# Check for CUDA
AC_ARG_WITH([cuda],
    [AS_HELP_STRING([--with-cuda=PATH],[prefix where cuda is installed @<:@default=no@:>@])],
    [if test "x$with_cuda" != "xno"
     then
        if test "x$with_cuda" != "xyes"
        then
            CUDA_CFLAGS="-I$with_cuda/include"
            CUDA_LIBS="-L$with_cuda/lib -L$with_cuda/lib64 -lcudart"
            NVCC="$with_cuda/bin/nvcc"
        else
            AC_CHECK_PROG([NVCC],nvcc)
            if test -n "$NVCC"
            then
                CUDA_CFLAGS="-I/usr/local/cuda/include"
                CUDA_LIBS="-L/usr/local/cuda/lib -L/usr/local/cuda/lib64 -lcudart"
            fi
        fi
        if test -n "$NVCC"; then
            AC_DEFINE([HAVE_CUDA],[true],[The cuda compiler is installed.])
        fi
    fi])
AC_SUBST(CUDA_CFLAGS)
AC_SUBST(CUDA_LIBS)
AC_SUBST(NVCC)
AM_CONDITIONAL([HAVECUDA],[test -n "$NVCC"])


# Check for CELL
AC_ARG_WITH([cell],
    [AS_HELP_STRING([--with-cell=PATH],[prefix where the IBM Cell-SDK and toolchain are installed @<:@default=nol@:>@])],
    [if test "x$with_cell" != "xno"
     then
        if test "x$with_cell" != "xyes"
        then
            CELLTOP="$with_cell"
        else
            CELLTOP="/opt/cell"
        fi
        AC_CHECK_PROG([PPUGCC],ppu-gcc,$CELLTOP/toolchain/bin/ppu-gcc,[],[$CELLTOP/toolchain/bin])
        AC_CHECK_PROG([SPUGCC],spu-gcc,$CELLTOP/toolchain/bin/spu-gcc,[],[$CELLTOP/toolchain/bin])
        if test x"$PPUGCC" == "x"; then
            AC_ERROR([Could not find the ppu-gcc compiler in $CELLTOP/toolchain/bin/])
        fi
        if test x"$SPUGCC" == "x"; then
            AC_ERROR([Could not find the spu-gcc compiler in $CELLTOP/toolchain/bin/])
        fi
        AC_DEFINE([HAVE_CELL],[true],[The Cell/BE Toolchain appears to be present.])
     fi])
AC_SUBST(CELLTOP)
AC_SUBST(PPUGCC)
AC_SUBST(SPUGCC)
AM_CONDITIONAL([HAVECELL],[test -n "$CELLTOP"])

# make the documentation
DX_INIT_DOXYGEN(mdcore,doc/Doxyfile,doc/)

# generate the Makefiles
AC_OUTPUT(Makefile
    src/Makefile
    src/Makefile_cell
    src/spu/Makefile
    examples/Makefile
    examples/argon/Makefile
    examples/bulk/Makefile
    examples/bulk/Makefile_cell
    examples/hybrid/Makefile
    examples/flexible/Makefile
    examples/jac/Makefile
    examples/apoa1/Makefile
    examples/neon/Makefile
    examples/stmv/Makefile
    doc/Makefile)

